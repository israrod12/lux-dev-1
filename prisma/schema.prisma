generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  firstName            String                @map("first_name")
  lastName             String                @map("last_name")
  name                 String?
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  password             String
  isVerified           Boolean               @default(false)
  dateOfBirth          DateTime?
  documentExpiresAt    DateTime?
  onboarding_complete  Boolean               @default(false)
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt

  accounts             Account[]
  sessions             Session[]
  verificationSessions VerificationSession[]
  profile              Profile?
  photos               Photo[]
  videos               Video[]
  calendarEvents       CalendarEvent[]

  @@map("users")
}

model Profile {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique @map("user_id")  
  model_name   String?    @unique
  location     String?
  nationality  String?
  age          Int?
  eye_color    String?
  bust_size    String?
  hip_size     String?
  weight_kg    Float?
  height_cm    Float?
  language     String[]
  description  String?
  social       Json?
  created_at   DateTime  @default(now())

  @@map("profiles")
}

model Photo {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  url        String
  is_profile Boolean  @default(false)
  is_cover   Boolean  @default(false)
  created_at DateTime @default(now())

  // Quit√© el @@unique con PartialIndex porque no es soportado en Prisma

  @@map("photos")
}

model Video {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  url        String
  created_at DateTime @default(now())

  @@map("videos")
}

model CalendarEvent {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  country    String
  place      String
  start_date DateTime
  end_date   DateTime
  created_at DateTime @default(now())

  @@map("calendar_events")
}

model VerificationSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  status    String   @default("NOT_STARTED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
